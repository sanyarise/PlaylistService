// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repo_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/sanyarise/playlist/internal/models"
)

// MockSongStore is a mock of SongStore interface.
type MockSongStore struct {
	ctrl     *gomock.Controller
	recorder *MockSongStoreMockRecorder
}

// MockSongStoreMockRecorder is the mock recorder for MockSongStore.
type MockSongStoreMockRecorder struct {
	mock *MockSongStore
}

// NewMockSongStore creates a new mock instance.
func NewMockSongStore(ctrl *gomock.Controller) *MockSongStore {
	mock := &MockSongStore{ctrl: ctrl}
	mock.recorder = &MockSongStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongStore) EXPECT() *MockSongStoreMockRecorder {
	return m.recorder
}

// CreateSong mocks base method.
func (m *MockSongStore) CreateSong(ctx context.Context, song *models.Song) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSong", ctx, song)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSong indicates an expected call of CreateSong.
func (mr *MockSongStoreMockRecorder) CreateSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSong", reflect.TypeOf((*MockSongStore)(nil).CreateSong), ctx, song)
}

// DeleteSong mocks base method.
func (m *MockSongStore) DeleteSong(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockSongStoreMockRecorder) DeleteSong(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockSongStore)(nil).DeleteSong), ctx, id)
}

// GetSong mocks base method.
func (m *MockSongStore) GetSong(ctx context.Context, id uuid.UUID) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSong", ctx, id)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSong indicates an expected call of GetSong.
func (mr *MockSongStoreMockRecorder) GetSong(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSong", reflect.TypeOf((*MockSongStore)(nil).GetSong), ctx, id)
}

// UpdateSong mocks base method.
func (m *MockSongStore) UpdateSong(ctx context.Context, song *models.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", ctx, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockSongStoreMockRecorder) UpdateSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockSongStore)(nil).UpdateSong), ctx, song)
}
